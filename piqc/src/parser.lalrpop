use crate::ast::*;
use crate::parser::Context;

grammar(context: &mut Context<'input>);

TypeQualifier: TypeQualifier = {
    "uniform" => TypeQualifier::Uniform,
    "varying" => TypeQualifier::Varying,
}

TypeKind: TypeKind = {
    "int" => TypeKind::INT,
    "float" => TypeKind::FLOAT,
    "bool" => TypeKind::BOOL,
    <TypeKind> "*" => TypeKind::new_ptr(<>),
}

Type: Type = {
    <TypeKind> => Type::new(TypeQualifier::Varying, <>),
    <TypeQualifier> <TypeKind> => Type::new(<>),
}

Int: i32 = {
    r"\d+" => <>.parse().unwrap(),
};

Float: f32 = {
    r"\d*\.\d*" => <>.parse().unwrap(),
};

Bool: bool = {
    "true" => true,
    "false" => false,
};

UnaryOp: UnaryOp = {
    "-" => UnaryOp::Negate,
    "~" => UnaryOp::BitNot,
    "!" => UnaryOp::LogicalNot,
};

MultiplicativeOp: BinaryOp = {
    "*" => BinaryOp::Mul,
};

AdditiveOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
};

ShiftOp: BinaryOp = {
    "<<" => BinaryOp::Shl,
    ">>" => BinaryOp::Shr,
};

BitAndOp: BinaryOp = {
    "&" => BinaryOp::BitAnd,
};

BitXorOp: BinaryOp = {
    "^" => BinaryOp::BitXor,
};

BitOrOp: BinaryOp = {
    "|" => BinaryOp::BitOr,
};

OrderOp: BinaryOp = {
    "<?" => BinaryOp::Min,
    ">?" => BinaryOp::Max,
};

ComparisonOp: BinaryOp = {
    "==" => BinaryOp::Eq,
    "!=" => BinaryOp::Ne,
    "<" => BinaryOp::Lt,
    ">" => BinaryOp::Gt,
    "<=" => BinaryOp::Le,
    ">=" => BinaryOp::Ge,
};

LogicalAndOp: BinaryOp = {
    "&&" => BinaryOp::LogicalAnd,
};

LogicalOrOp: BinaryOp = {
    "||" => BinaryOp::LogicalOr,
};

IntLiteral: IntLiteral = {
    @L Int @R => IntLiteral::new(<>),
};

FloatLiteral: FloatLiteral = {
    @L Float @R => FloatLiteral::new(<>),
};

BoolLiteral: BoolLiteral = {
    @L Bool @R => BoolLiteral::new(<>),
};

Element: Element = {
    <@L> "@element" <@R> => Element::new(<>),
};

Count: Count = {
    <@L> "@count" <@R> => Count::new(<>),
};

Variable: Variable = {
    r"[A-Za-z_][0-9A-Za-z_]*" => context.intern_variable(<>)
};

Identifier: Identifier = {
    @L Variable @R => Identifier::new(<>),
};

PrimaryExpr: Expr = {
    IntLiteral => Expr::IntLiteral(<>),
    FloatLiteral => Expr::FloatLiteral(<>),
    BoolLiteral => Expr::BoolLiteral(<>),
    Element => Expr::Element(<>),
    Count => Expr::Count(<>),
    Identifier => Expr::Identifier(<>),
    "(" <Expr> ")" => <>,
};

PostfixExpr: Expr = {
    PrimaryExpr,
    <@L> <PostfixExpr> "[" <Expr> "]" <@R> => Expr::Index(IndexExpr::new(<>)),
};

UnaryExpr: Expr = {
    PostfixExpr,
    @L UnaryOp UnaryExpr @R => Expr::Unary(UnaryExpr::new(<>)),
};

BinaryExpr<Op, PrevExpr>: Expr = {
    PrevExpr,
    @L BinaryExpr<Op, PrevExpr> Op PrevExpr @R => Expr::Binary(BinaryExpr::new(<>)),
};

MultiplicativeExpr = BinaryExpr<MultiplicativeOp, UnaryExpr>;

AdditiveExpr = BinaryExpr<AdditiveOp, MultiplicativeExpr>;

ShiftExpr = BinaryExpr<ShiftOp, AdditiveExpr>;

BitAndExpr = BinaryExpr<BitAndOp, ShiftExpr>;

BitXorExpr = BinaryExpr<BitXorOp, BitAndExpr>;

BitOrExpr = BinaryExpr<BitOrOp, BitXorExpr>;

OrderExpr = BinaryExpr<OrderOp, BitOrExpr>;

ComparisonExpr = BinaryExpr<ComparisonOp, OrderExpr>;

LogicalAndExpr = BinaryExpr<LogicalAndOp, ComparisonExpr>;

LogicalOrExpr = BinaryExpr<LogicalOrOp, LogicalAndExpr>;

Expr: Expr = {
    LogicalOrExpr,
};

BlockStmt: BlockStmt = {
    <@L> "{" <Stmt*> "}" <@R> => BlockStmt::new(<>),
};

DeclStmt: DeclStmt = {
    <@L> <Type> <Identifier> "=" <Expr> ";" <@R> => DeclStmt::new(<>),
};

AssignStmt: AssignStmt = {
    <@L> <PostfixExpr> "=" <Expr> ";" <@R> => AssignStmt::new(<>),
};

IfBlock: Stmt = {
    BlockStmt => Stmt::Block(<>),
};

ElseBlock: Stmt = {
    BlockStmt => Stmt::Block(<>),
    IfStmt => Stmt::If(<>),
};

IfStmt: IfStmt = {
    <@L> "if" "(" <Expr> ")" <IfBlock> <("else" <ElseBlock>)?> <@R> => IfStmt::new(<>),
};

WhileBlock: Stmt = {
    BlockStmt => Stmt::Block(<>),
};

WhileStmt: WhileStmt = {
    <@L> "while" "(" <Expr> ")" <WhileBlock> <@R> => WhileStmt::new(<>),
};

ReturnStmt: ReturnStmt = {
    <@L> "return" ";" <@R> => ReturnStmt::new(<>),
};

Stmt: Stmt = {
    BlockStmt => Stmt::Block(<>),
    DeclStmt => Stmt::Decl(<>),
    AssignStmt => Stmt::Assign(<>),
    IfStmt => Stmt::If(<>),
    WhileStmt => Stmt::While(<>),
    ReturnStmt => Stmt::Return(<>),
};

Param: Param = {
    @L Type Identifier @R => Param::new(<>),
};

Params: Vec<Param> = {
    <params: (<Params> ",")?> <param: Param> => {
        let mut params = params.unwrap_or_else(Vec::new);
        params.push(param);
        params
    },
};

FuncBlock: Stmt = {
    BlockStmt => Stmt::Block(<>),
};

pub Func: Func = {
    <@L> "fn" <Identifier> "(" <Params?> ")" <FuncBlock> <@R> => Func::new(<>),
};
