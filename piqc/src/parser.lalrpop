use crate::ast::*;
use crate::parser::Context;

grammar(context: &mut Context<'input>);

Int: i32 = {
    r"\d+" => <>.parse().unwrap(),
};

Float: f32 = {
    r"\d*\.\d*" => <>.parse().unwrap(),
};

Bool: bool = {
    "true" => true,
    "false" => false,
};

Symbol: Symbol = {
    r"[A-Za-z_][0-9A-Za-z_]*" => context.intern_symbol(<>)
};

UnaryOp: UnaryOp = {
    "-" => UnaryOp::Negate,
    "!" => UnaryOp::Not,
};

MultiplicativeOp: BinaryOp = {
    "*" => BinaryOp::Mul,
};

AdditiveOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
};

ShiftOp: BinaryOp = {
    "<<" => BinaryOp::Shl,
    ">>" => BinaryOp::Shr,
};

BitAndOp: BinaryOp = {
    "&" => BinaryOp::BitAnd,
};

BitXorOp: BinaryOp = {
    "^" => BinaryOp::BitXor,
};

BitOrOp: BinaryOp = {
    "|" => BinaryOp::BitOr,
};

OrderOp: BinaryOp = {
    "<?" => BinaryOp::Min,
    ">?" => BinaryOp::Max,
};

ComparisonOp: BinaryOp = {
    "==" => BinaryOp::Eq,
    "!=" => BinaryOp::Ne,
    "<" => BinaryOp::Lt,
    ">" => BinaryOp::Gt,
    "<=" => BinaryOp::Le,
    ">=" => BinaryOp::Ge,
};

LogicalAndOp: BinaryOp = {
    "&&" => BinaryOp::LogicalAnd,
};

LogicalOrOp: BinaryOp = {
    "||" => BinaryOp::LogicalOr,
};

Variability: Variability = {
    "uniform" => Variability::Uniform,
    "varying" => Variability::Varying,
}

PrimType: PrimType = {
    "int" => PrimType::Int,
    "float" => PrimType::Float,
    "bool" => PrimType::Bool,
}

TypeKind: TypeKind = {
    PrimType => TypeKind::Prim(<>),
    <PrimType> "*" => TypeKind::Ptr(<>),
}

Type: Type = {
    <variability: Variability?> <kind: TypeKind> => Type::new(variability.unwrap_or(Variability::Varying), kind),
}

Identifier: Identifier = {
    <l: @L> <symbol: Symbol> <r: @R> => Identifier::new(Span::new(l, r), symbol),
};

BaseExpr<T>: Expr = {
    <l: @L> <kind: T> <r: @R> => Expr::new(Span::new(l, r), kind),
};

IntExpr: IntExpr = {
    Int => IntExpr::new(<>),
};

FloatExpr: FloatExpr = {
    Float => FloatExpr::new(<>),
};

BoolExpr: BoolExpr = {
    Bool => BoolExpr::new(<>),
};

ElementExpr: ElementExpr = {
    "@element" => ElementExpr::new(),
};

CountExpr: CountExpr = {
    "@count" => CountExpr::new(),
};

IdentifierExpr: IdentifierExpr = {
    Identifier => IdentifierExpr::new(<>),
};

ParenExpr: ParenExpr = {
    "(" <Expr> ")" => ParenExpr::new(<>),
}

PrimaryExprKind: ExprKind = {
    IntExpr => <>.into(),
    FloatExpr => <>.into(),
    BoolExpr => <>.into(),
    ElementExpr => <>.into(),
    CountExpr => <>.into(),
    IdentifierExpr => <>.into(),
    ParenExpr => <>.into(),
};

PrimaryExpr = BaseExpr<PrimaryExprKind>;

IndexExpr: IndexExpr = {
    <PostfixExpr> "[" <Expr> "]" => IndexExpr::new(<>).into(),
}

PostfixExprKind: ExprKind = {
    PrimaryExprKind,
    IndexExpr => <>.into(),
};

PostfixExpr: Expr = BaseExpr<PostfixExprKind>;

UnaryExprKind: ExprKind = {
    UnaryOp UnaryExpr => UnaryExpr::new(<>).into(),
};

UnaryExpr: Expr = {
    PostfixExpr,
    BaseExpr<UnaryExprKind>
};

BinaryExprKind<Op, PrevExpr>: ExprKind = {
    BinaryExpr<Op, PrevExpr> Op PrevExpr => BinaryExpr::new(<>).into(),
};

BinaryExpr<Op, PrevExpr>: Expr = {
    PrevExpr,
    BaseExpr<BinaryExprKind<Op, PrevExpr>>,
};

MultiplicativeExpr = BinaryExpr<MultiplicativeOp, UnaryExpr>;

AdditiveExpr = BinaryExpr<AdditiveOp, MultiplicativeExpr>;

ShiftExpr = BinaryExpr<ShiftOp, AdditiveExpr>;

BitAndExpr = BinaryExpr<BitAndOp, ShiftExpr>;

BitXorExpr = BinaryExpr<BitXorOp, BitAndExpr>;

BitOrExpr = BinaryExpr<BitOrOp, BitXorExpr>;

OrderExpr = BinaryExpr<OrderOp, BitOrExpr>;

ComparisonExpr = BinaryExpr<ComparisonOp, OrderExpr>;

LogicalAndExpr = BinaryExpr<LogicalAndOp, ComparisonExpr>;

LogicalOrExpr = BinaryExpr<LogicalOrOp, LogicalAndExpr>;

Expr: Expr = {
    LogicalOrExpr,
};

BaseStmt<T>: Stmt = {
    <l: @L> <kind: T> <r: @R> => Stmt::new(Span::new(l, r), kind),
};

BlockStmtKind: StmtKind = {
    "{" <Stmt*> "}" => BlockStmt::new(<>).into(),
};

BlockStmt = BaseStmt<BlockStmtKind>;

DeclStmtKind: StmtKind = {
    <Type> <Identifier> "=" <Expr> ";" => DeclStmt::new(<>).into(),
};

DeclStmt = BaseStmt<DeclStmtKind>;

AssignStmtKind: StmtKind = {
    <PostfixExpr> "=" <Expr> ";" => AssignStmt::new(<>).into(),
};

AssignStmt = BaseStmt<AssignStmtKind>;

IfBlock: Stmt = {
    BlockStmt,
};

ElseBlock: Stmt = {
    BlockStmt,
    IfStmt,
};

IfStmtKind: StmtKind = {
    "if" "(" <Expr> ")" <IfBlock> <("else" <ElseBlock>)?> => IfStmt::new(<>).into(),
};

IfStmt = BaseStmt<IfStmtKind>;

WhileBlock: Stmt = {
    BlockStmt,
};

WhileStmtKind: StmtKind = {
    "while" "(" <Expr> ")" <WhileBlock> => WhileStmt::new(<>).into(),
};

WhileStmt = BaseStmt<WhileStmtKind>;

ReturnStmtKind: StmtKind = {
    "return" ";" => ReturnStmt::new().into(),
};

ReturnStmt = BaseStmt<ReturnStmtKind>;

Stmt: Stmt = {
    BlockStmt,
    DeclStmt,
    AssignStmt,
    IfStmt,
    WhileStmt,
    ReturnStmt,
};

Param: Param = {
    <l: @L> <ty: Type> <identifier: Identifier> <r: @R> => Param::new(Span::new(l, r), ty, identifier),
};

Params: Vec<Param> = {
    <params: (<Params> ",")?> <param: Param> => {
        let mut params = params.unwrap_or_default();
        params.push(param);
        params
    },
};

FuncBlock: Stmt = {
    BlockStmt,
};

pub Func: Func = {
    <l: @L> "fn" <identifier: Identifier> "(" <params: Params?> ")" <stmt: FuncBlock> <r: @R> => Func::new(Span::new(l, r), identifier, params.unwrap_or_default(), stmt),
};
